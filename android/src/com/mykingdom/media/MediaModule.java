/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.mykingdom.media;

import java.io.ByteArrayOutputStream;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;
import java.util.HashMap;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiBlob;
import org.appcelerator.kroll.common.Log;

import android.content.ContentResolver;
import android.content.ContentUris;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.media.MediaMetadataRetriever;
import android.net.Uri;
import android.os.ParcelFileDescriptor;
import android.provider.MediaStore;

@Kroll.module(name = "Media", id = "com.mykingdom.media")
public class MediaModule extends KrollModule {

	// Standard Debugging variables
	private static final String TAG = "MediaModule";
	@Kroll.constant
	public static final int MEDIA_TYPE_ALL = 0;
	@Kroll.constant
	public static final int MEDIA_TYPE_IMAGE = 1;
	@Kroll.constant
	public static final int MEDIA_TYPE_VIDEO = 2;
	@Kroll.constant
	public static final int MEDIA_TYPE_AUDIO = 3;
	@Kroll.constant
	public static final int THUMBANIL_MINI = MediaStore.Images.Thumbnails.MINI_KIND;
	@Kroll.constant
	public static final int THUMBANIL_MICRO = MediaStore.Images.Thumbnails.MICRO_KIND;

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;

	public MediaModule() {
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
		Log.d(TAG, "inside onAppCreate");
		// put module init code that needs to run when the application is
		// created
	}

	private Object[] getImages() {
		String[] proj = { MediaStore.Images.Media._ID,
				MediaStore.Images.Media.DISPLAY_NAME,
				MediaStore.Images.Media.BUCKET_ID,
				MediaStore.Images.Media.BUCKET_DISPLAY_NAME,
				MediaStore.Images.Media.DATA,
				MediaStore.Images.Media.DATE_TAKEN,
				MediaStore.Images.Media.LATITUDE,
				MediaStore.Images.Media.LONGITUDE,
				MediaStore.Images.Media.MIME_TYPE,
				MediaStore.Images.Media.SIZE,
				MediaStore.Images.Media.ORIENTATION,
				MediaStore.Images.Media.DESCRIPTION,
				MediaStore.Images.Media.IS_PRIVATE,
				MediaStore.Images.Media.PICASA_ID, "width", "height" };
		Cursor cursor = TiApplication
				.getInstance()
				.getContentResolver()
				.query(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, proj,
						null, null, null);
		Object[] items = new Object[cursor.getCount()];
		Integer i = 0;
		if (cursor.moveToFirst()) {
			do {
				HashMap<String, Object> item = new HashMap<String, Object>();
				item.put("id", cursor.getInt(0));
				item.put("displayName", cursor.getString(1));
				item.put("bucketId", cursor.getString(2));
				item.put("bucketDisplayName", cursor.getString(3));
				item.put("data", cursor.getString(4));
				item.put("dateTaken", cursor.getInt(5));
				item.put("latitude", cursor.getDouble(6));
				item.put("longitude", cursor.getDouble(7));
				item.put("mimeType", cursor.getString(8));
				item.put("size", cursor.getInt(9));
				item.put("orientation", cursor.getInt(10));
				item.put("description", cursor.getString(11));
				item.put("isPrivate", cursor.getInt(12));
				item.put("picasaId", cursor.getString(13));
				item.put("width", cursor.getString(14));
				item.put("height", cursor.getString(15));
				items[i] = item;
				i++;
			} while (cursor.moveToNext());
		}
		cursor.close();
		return items;
	}

	private Object[] getVideos() {
		String[] proj = { MediaStore.Video.Media._ID,
				MediaStore.Video.Media.DISPLAY_NAME,
				MediaStore.Video.Media.BUCKET_ID,
				MediaStore.Video.Media.BUCKET_DISPLAY_NAME,
				MediaStore.Video.Media.DATA, MediaStore.Video.Media.DATE_TAKEN,
				MediaStore.Video.Media.LATITUDE,
				MediaStore.Video.Media.LONGITUDE,
				MediaStore.Video.Media.MIME_TYPE, MediaStore.Video.Media.SIZE,
				MediaStore.Video.Media.DESCRIPTION,
				MediaStore.Video.Media.IS_PRIVATE, "width", "height",
				MediaStore.Video.Media.CATEGORY,
				MediaStore.Video.Media.DURATION, MediaStore.Video.Media.ALBUM,
				MediaStore.Video.Media.ARTIST };
		Cursor cursor = TiApplication
				.getInstance()
				.getContentResolver()
				.query(MediaStore.Video.Media.EXTERNAL_CONTENT_URI, proj, null,
						null, null);
		Object[] items = new Object[cursor.getCount()];
		Integer i = 0;
		if (cursor.moveToFirst()) {
			do {
				HashMap<String, Object> item = new HashMap<String, Object>();
				item.put("id", cursor.getInt(0));
				item.put("displayName", cursor.getString(1));
				item.put("bucketId", cursor.getString(2));
				item.put("bucketDisplayName", cursor.getString(3));
				item.put("data", cursor.getString(4));
				item.put("dateTaken", cursor.getInt(5));
				item.put("latitude", cursor.getDouble(6));
				item.put("longitude", cursor.getDouble(7));
				item.put("mimeType", cursor.getString(8));
				item.put("size", cursor.getInt(9));
				item.put("description", cursor.getString(10));
				item.put("isPrivate", cursor.getInt(11));
				item.put("width", cursor.getString(12));
				item.put("height", cursor.getString(13));
				item.put("category", cursor.getString(14));
				item.put("duration", cursor.getInt(15));
				item.put("album", cursor.getString(16));
				item.put("artist", cursor.getString(17));
				items[i] = item;
				i++;
			} while (cursor.moveToNext());
		}
		cursor.close();
		return items;
	}

	private Object[] getAudios() {
		String[] proj = { MediaStore.Audio.Media._ID,
				MediaStore.Audio.Media.DISPLAY_NAME,
				MediaStore.Audio.Media.DATA, MediaStore.Audio.Media.DATE_ADDED,
				MediaStore.Audio.Media.MIME_TYPE, MediaStore.Audio.Media.SIZE,
				MediaStore.Audio.Media.DURATION, MediaStore.Audio.Media.ALBUM,
				MediaStore.Audio.Media.ALBUM_ID,
				MediaStore.Audio.Media.ALBUM_KEY,
				MediaStore.Audio.Media.ARTIST,
				MediaStore.Audio.Media.ARTIST_ID,
				MediaStore.Audio.Media.ARTIST_KEY,
				MediaStore.Audio.Media.BOOKMARK,
				MediaStore.Audio.Media.COMPOSER,
				MediaStore.Audio.Media.IS_ALARM,
				MediaStore.Audio.Media.IS_MUSIC,
				MediaStore.Audio.Media.IS_NOTIFICATION,
				MediaStore.Audio.Media.IS_PODCAST,
				MediaStore.Audio.Media.IS_RINGTONE,
				MediaStore.Audio.Media.TRACK, MediaStore.Audio.Media.YEAR };
		Cursor cursor = TiApplication
				.getInstance()
				.getContentResolver()
				.query(MediaStore.Audio.Media.EXTERNAL_CONTENT_URI, proj, null,
						null, null);
		Object[] items = new Object[cursor.getCount()];
		Integer i = 0;
		if (cursor.moveToFirst()) {
			do {
				HashMap<String, Object> item = new HashMap<String, Object>();
				item.put("id", cursor.getInt(0));
				item.put("displayName", cursor.getString(1));
				item.put("data", cursor.getString(2));
				item.put("dateAdded", cursor.getInt(3));
				item.put("mimeType", cursor.getString(4));
				item.put("size", cursor.getInt(5));
				item.put("duration", cursor.getInt(6));
				item.put("album", cursor.getString(7));
				item.put("albumId", cursor.getInt(8));
				item.put("albumKey", cursor.getString(9));
				item.put("artist", cursor.getString(10));
				item.put("artistId", cursor.getInt(11));
				item.put("artistKey", cursor.getString(12));
				item.put("bookmark", cursor.getInt(13));
				item.put("composer", cursor.getString(14));
				item.put("isAlaram", cursor.getInt(15));
				item.put("isMusic", cursor.getInt(16));
				item.put("isNotification", cursor.getInt(17));
				item.put("isPodcast", cursor.getInt(18));
				item.put("isRingtone", cursor.getInt(19));
				item.put("track", cursor.getInt(20));
				item.put("year", cursor.getInt(21));
				items[i] = item;
				i++;
			} while (cursor.moveToNext());
		}
		cursor.close();
		return items;
	}

	@Kroll.method
	public HashMap getItems(Object[] args) {
		System.gc();
		HashMap<String, Object> obj = new HashMap<String, Object>();
		if (Arrays.asList(args).contains(MEDIA_TYPE_IMAGE)
				|| Arrays.asList(args).contains(MEDIA_TYPE_ALL)) {
			Object[] images = getImages();
			obj.put("images", images);
			obj.put("imagesCount", images.length);
		}
		if (Arrays.asList(args).contains(MEDIA_TYPE_VIDEO)
				|| Arrays.asList(args).contains(MEDIA_TYPE_ALL)) {
			Object[] videos = getVideos();
			obj.put("videos", videos);
			obj.put("videosCount", videos.length);
		}
		if (Arrays.asList(args).contains(MEDIA_TYPE_AUDIO)
				|| Arrays.asList(args).contains(MEDIA_TYPE_ALL)) {
			Object[] audios = getAudios();
			obj.put("audios", audios);
			obj.put("audiosCount", audios.length);
		}
		return obj;
	}

	@Kroll.method
	public TiBlob getImageThumbnail(Long imageId, Integer thumbnailSize) {
		Bitmap artwork = MediaStore.Images.Thumbnails.getThumbnail(
				TiApplication.getInstance().getContentResolver(), imageId,
				thumbnailSize, null);
		ByteArrayOutputStream stream = new ByteArrayOutputStream();
		artwork.compress(Bitmap.CompressFormat.JPEG, 100, stream);
		byte[] byteArray = stream.toByteArray();
		return TiBlob.blobFromData(byteArray);
	}

	@Kroll.method
	public TiBlob getVideoThumbnail(Long videoId, Integer thumbnailSize) {
		Bitmap artwork = MediaStore.Video.Thumbnails.getThumbnail(TiApplication
				.getInstance().getContentResolver(), videoId, thumbnailSize,
				null);
		ByteArrayOutputStream stream = new ByteArrayOutputStream();
		artwork.compress(Bitmap.CompressFormat.JPEG, 100, stream);
		byte[] byteArray = stream.toByteArray();
		return TiBlob.blobFromData(byteArray);
	}

	@Kroll.method
	public TiBlob getAlbumArt(Long albumId) {
		try {
			Uri sArtworkUri = Uri
					.parse("content://media/external/audio/albumart");
			Uri albumArtUri = ContentUris.withAppendedId(sArtworkUri, albumId);
			Bitmap artwork = MediaStore.Images.Media.getBitmap(TiApplication
					.getInstance().getContentResolver(), albumArtUri);
			ByteArrayOutputStream stream = new ByteArrayOutputStream();
			artwork.compress(Bitmap.CompressFormat.JPEG, 100, stream);
			byte[] byteArray = stream.toByteArray();
			return TiBlob.blobFromData(byteArray);
		} catch (Exception exp) {
			return null;
		}
	}

	@Kroll.method
	public TiBlob getImageAtTime(String videoPath, Long time) {
		try {
			MediaMetadataRetriever mediaMetadata = new MediaMetadataRetriever();
			mediaMetadata.setDataSource(videoPath);
			Bitmap artwork = mediaMetadata.getFrameAtTime(time * 1000);
			ByteArrayOutputStream stream = new ByteArrayOutputStream();
			artwork.compress(Bitmap.CompressFormat.JPEG, 100, stream);
			byte[] byteArray = stream.toByteArray();
			return TiBlob.blobFromData(byteArray);
		} catch (Exception exp) {
			return null;
		}
	}

}
